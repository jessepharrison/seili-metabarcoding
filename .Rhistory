over1 <- 0.02 * max(disp_plot1$stats[nrow(disp_plot1$stats),])
lim <- over1 + max(disp_plot1$stats[nrow(disp_plot1$stats),])
boxplot(beta1, xlab = "", ylim = c(NA, lim))
boxplot(beta1, xlab = "", ylim = c(0, lim))
min(disp_plot1$stats[nrow(disp_plot1$stats),])
boxplot(beta1, xlab = "", ylim = c(minlim, maxlim))
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tukey_beta1 <- TukeyHSD(beta1)
letters1 <- data.frame(multcompLetters(extract_p(tukey_beta1$group))['Letters'])
letters1$Treatment <- rownames(letters1)
letters1 <- letters1[order(letters1$Treatment), ]
disp_plot1 <- boxplot(beta1, xlab = "")
over1 <- 0.02 * max(disp_plot1$stats[nrow(disp_plot1$stats),])
maxlim <- over1 + max(disp_plot1$stats[nrow(disp_plot1$stats),])
minlim <- min(disp_plot1$stats[nrow(disp_plot1$stats),])
boxplot(beta1, xlab = "", ylim = c(minlim, maxlim))
min(disp_plot1$stats[nrow(disp_plot1$stats),])
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tukey_beta1 <- TukeyHSD(beta1)
letters1 <- data.frame(multcompLetters(extract_p(tukey_beta1$group))['Letters'])
letters1$Treatment <- rownames(letters1)
letters1 <- letters1[order(letters1$Treatment), ]
disp_plot1 <- boxplot(beta1, xlab = "")
boxplot(beta1, xlab = "")
disp_plot1$stats
min(disp_plot1$stats)
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tukey_beta1 <- TukeyHSD(beta1)
letters1 <- data.frame(multcompLetters(extract_p(tukey_beta1$group))['Letters'])
letters1$Treatment <- rownames(letters1)
letters1 <- letters1[order(letters1$Treatment), ]
disp_plot1 <- boxplot(beta1, xlab = "")
over1 <- 0.02 * max(disp_plot1$stats[nrow(disp_plot1$stats),])
maxlim <- over1 + max(disp_plot1$stats[nrow(disp_plot1$stats),])
minlim <- min(disp_plot1$stats)
boxplot(beta1, xlab = "", ylim = c(minlim, maxlim))
text(c(1:nlevels(as.factor(ps_df[, pheno1]))),
disp_plot1$stats[nrow(disp_plot1$stats),] + over1, letters1[,1])
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tukey_beta1 <- TukeyHSD(beta1)
letters1 <- data.frame(multcompLetters(extract_p(tukey_beta1$group))['Letters'])
letters1$Treatment <- rownames(letters1)
letters1 <- letters1[order(letters1$Treatment), ]
disp_plot1 <- boxplot(beta1, xlab = "")
over1 <- 0.1 * max(disp_plot1$stats[nrow(disp_plot1$stats),])
maxlim <- max(disp_plot1$stats)
minlim <- min(disp_plot1$stats)
boxplot(beta1, xlab = "", ylim = c(minlim, maxlim))
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tukey_beta1 <- TukeyHSD(beta1)
letters1 <- data.frame(multcompLetters(extract_p(tukey_beta1$group))['Letters'])
letters1$Treatment <- rownames(letters1)
letters1 <- letters1[order(letters1$Treatment), ]
disp_plot1 <- boxplot(beta1, xlab = "")
over1 <- 0.1 * max(disp_plot1$stats[nrow(disp_plot1$stats),])
maxlim <- max(disp_plot1$stats[nrow(disp_plot1$stats),])
minlim <- min(disp_plot1$stats)
boxplot(beta1, xlab = "", ylim = c(minlim, maxlim))
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tukey_beta1 <- TukeyHSD(beta1)
letters1 <- data.frame(multcompLetters(extract_p(tukey_beta1$group))['Letters'])
letters1$Treatment <- rownames(letters1)
letters1 <- letters1[order(letters1$Treatment), ]
disp_plot1 <- boxplot(beta1, xlab = "")
over1 <- 0.02 * max(disp_plot1$stats[nrow(disp_plot1$stats),])
maxlim <- max(disp_plot1$stats[nrow(disp_plot1$stats),])
minlim <- min(disp_plot1$stats)
boxplot(beta1, xlab = "", ylim = c(minlim, maxlim))
text(c(1:nlevels(as.factor(ps_df[, pheno1]))),
disp_plot1$stats[nrow(disp_plot1$stats),] + over1, letters1[,1])
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tukey_beta1 <- TukeyHSD(beta1)
letters1 <- data.frame(multcompLetters(extract_p(tukey_beta1$group))['Letters'])
letters1$Treatment <- rownames(letters1)
letters1 <- letters1[order(letters1$Treatment), ]
disp_plot1 <- boxplot(beta1, xlab = "")
over1 <- 0.02 * max(disp_plot1$stats[nrow(disp_plot1$stats),])
maxlim <- max(disp_plot1$stats[nrow(disp_plot1$stats),])
minlim <- min(disp_plot1$stats)
boxplot(beta1, xlab = "", ylim = c(minlim, maxlim))
text(c(1:nlevels(as.factor(ps_df[, pheno1]))),
disp_plot1$stats[nrow(disp_plot1$stats),] + over1, letters1[,1])
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tukey_beta1 <- TukeyHSD(beta1)
letters1 <- data.frame(multcompLetters(extract_p(tukey_beta1$group))['Letters'])
letters1$Treatment <- rownames(letters1)
letters1 <- letters1[order(letters1$Treatment), ]
disp_plot1 <- boxplot(beta1, xlab = "")
over1 <- 0.02 * max(disp_plot1$stats[nrow(disp_plot1$stats),])
maxlim <- over1 + max(disp_plot1$stats[nrow(disp_plot1$stats),])
minlim <- min(disp_plot1$stats)
boxplot(beta1, xlab = "", ylim = c(minlim, maxlim))
text(c(1:nlevels(as.factor(ps_df[, pheno1]))),
disp_plot1$stats[nrow(disp_plot1$stats),] + over1, letters1[,1])
letters1
tukey_beta1
howmany = "1"
tukey_beta1 = "test"
if (howmany == "1" &&
tukey_beta1 != "PERMDISP p > 0.05; post-hoc test not performed"){
letters1 <- data.frame(multcompLetters(extract_p(tukey_beta1$group))['Letters'])
letters1$Treatment <- rownames(letters1)
letters1 <- letters1[order(letters1$Treatment), ]
disp_plot1 <- boxplot(beta1, xlab = "")
over1 <- 0.02 * max(disp_plot1$stats[nrow(disp_plot1$stats),])
maxlim <- over1 + max(disp_plot1$stats[nrow(disp_plot1$stats),])
minlim <- min(disp_plot1$stats)
boxplot(beta1, xlab = "", ylim = c(minlim, maxlim))
text(c(1:nlevels(as.factor(ps_df[, pheno1]))),
disp_plot1$stats[nrow(disp_plot1$stats),] + over1, letters1[,1])
}
rm(list=ls())
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tukey_beta1 <- TukeyHSD(beta1)
if (howmany == "1" &&
tukey_beta1 != "PERMDISP p > 0.05; post-hoc test not performed"){
letters1 <- data.frame(multcompLetters(extract_p(tukey_beta1$group))['Letters'])
letters1$Treatment <- rownames(letters1)
letters1 <- letters1[order(letters1$Treatment), ]
disp_plot1 <- boxplot(beta1, xlab = "")
over1 <- 0.02 * max(disp_plot1$stats[nrow(disp_plot1$stats),])
maxlim <- over1 + max(disp_plot1$stats[nrow(disp_plot1$stats),])
minlim <- min(disp_plot1$stats)
boxplot(beta1, xlab = "", ylim = c(minlim, maxlim))
text(c(1:nlevels(as.factor(ps_df[, pheno1]))),
disp_plot1$stats[nrow(disp_plot1$stats),] + over1, letters1[,1])
}
howmany = "1"
if (howmany == "1" &&
tukey_beta1 != "PERMDISP p > 0.05; post-hoc test not performed"){
letters1 <- data.frame(multcompLetters(extract_p(tukey_beta1$group))['Letters'])
letters1$Treatment <- rownames(letters1)
letters1 <- letters1[order(letters1$Treatment), ]
disp_plot1 <- boxplot(beta1, xlab = "")
over1 <- 0.02 * max(disp_plot1$stats[nrow(disp_plot1$stats),])
maxlim <- over1 + max(disp_plot1$stats[nrow(disp_plot1$stats),])
minlim <- min(disp_plot1$stats)
boxplot(beta1, xlab = "", ylim = c(minlim, maxlim))
text(c(1:nlevels(as.factor(ps_df[, pheno1]))),
disp_plot1$stats[nrow(disp_plot1$stats),] + over1, letters1[,1])
}
if (howmany == "1" &&
tukey_beta1 != "PERMDISP p > 0.05; post-hoc test not performed"){
letters1 <- data.frame(multcompLetters(extract_p(tukey_beta1$group))['Letters'])
letters1$Treatment <- rownames(letters1)
letters1 <- letters1[order(letters1$Treatment), ]
disp_plot1 <- boxplot(beta1, xlab = "")
over1 <- 0.02 * max(disp_plot1$stats[nrow(disp_plot1$stats),])
maxlim <- over1 + max(disp_plot1$stats[nrow(disp_plot1$stats),])
minlim <- min(disp_plot1$stats)
boxplot(beta1, xlab = "", ylim = c(minlim, maxlim))
text(c(1:nlevels(as.factor(ps_df[, pheno1]))),
disp_plot1$stats[nrow(disp_plot1$stats),] + over1, letters1[,1])
}
dev.off()
if (howmany == "1" &&
tukey_beta1 != "PERMDISP p > 0.05; post-hoc test not performed"){
letters1 <- data.frame(multcompLetters(extract_p(tukey_beta1$group))['Letters'])
letters1$Treatment <- rownames(letters1)
letters1 <- letters1[order(letters1$Treatment), ]
disp_plot1 <- boxplot(beta1, xlab = "")
over1 <- 0.02 * max(disp_plot1$stats[nrow(disp_plot1$stats),])
maxlim <- over1 + max(disp_plot1$stats[nrow(disp_plot1$stats),])
minlim <- min(disp_plot1$stats)
boxplot(beta1, xlab = "", ylim = c(minlim, maxlim))
text(c(1:nlevels(as.factor(ps_df[, pheno1]))),
disp_plot1$stats[nrow(disp_plot1$stats),] + over1, letters1[,1])
}
tukey_beta1
letters1 <- data.frame(multcompLetters(extract_p(tukey_beta1$group))['Letters'])
letters1
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tbl <- TukeyHSD(beta1)
transformTable <- function(tbl, metric) {
# Takes table of TurkeyHSD output metrics
# and transforms them into a pairwise comparison matrix.
# tbl is assumed to be a data.frame or tibble,
# var is assumed to be a character string
# giving the variable name of the metric in question
# (here: "diff", "lwr", "upr", or "p_adj")
tbl <- tbl %>%
# Split comparison into individual variables
mutate(
Var1 = as.numeric(substr(X, 1, 1)),
Var2 = as.numeric(substr(X, 3, 3))) %>%
# Only keep relevant fields
select(Var1, Var2, matches(metric)) %>%
# Filter out NA's
filter(!is.na(metric)) %>%
# Make into "wide" format using Var2
spread_(key = 'Var2', value = metric, fill = '')
# Let's change the row names to Var1
row.names(tbl) <- tbl$Var1
# And drop the Var1 column
tbl <- select(tbl, -Var1)
return(tbl)
}
transformTable(df, 'p_adj')
# Load packages
library(vegan)
library(multcompView)
library(dplyr)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tbl <- TukeyHSD(beta1)
transformTable <- function(tbl, metric) {
# Takes table of TurkeyHSD output metrics
# and transforms them into a pairwise comparison matrix.
# tbl is assumed to be a data.frame or tibble,
# var is assumed to be a character string
# giving the variable name of the metric in question
# (here: "diff", "lwr", "upr", or "p_adj")
tbl <- tbl %>%
# Split comparison into individual variables
mutate(
Var1 = as.numeric(substr(X, 1, 1)),
Var2 = as.numeric(substr(X, 3, 3))) %>%
# Only keep relevant fields
select(Var1, Var2, matches(metric)) %>%
# Filter out NA's
filter(!is.na(metric)) %>%
# Make into "wide" format using Var2
spread_(key = 'Var2', value = metric, fill = '')
# Let's change the row names to Var1
row.names(tbl) <- tbl$Var1
# And drop the Var1 column
tbl <- select(tbl, -Var1)
return(tbl)
}
transformTable(df, 'p_adj')
# Load packages
library(vegan)
library(multcompView)
library(tidyverse)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tbl <- TukeyHSD(beta1)
transformTable <- function(tbl, metric) {
# Takes table of TurkeyHSD output metrics
# and transforms them into a pairwise comparison matrix.
# tbl is assumed to be a data.frame or tibble,
# var is assumed to be a character string
# giving the variable name of the metric in question
# (here: "diff", "lwr", "upr", or "p_adj")
tbl <- tbl %>%
# Split comparison into individual variables
mutate(
Var1 = as.numeric(substr(X, 1, 1)),
Var2 = as.numeric(substr(X, 3, 3))) %>%
# Only keep relevant fields
select(Var1, Var2, matches(metric)) %>%
# Filter out NA's
filter(!is.na(metric)) %>%
# Make into "wide" format using Var2
spread_(key = 'Var2', value = metric, fill = '')
# Let's change the row names to Var1
row.names(tbl) <- tbl$Var1
# And drop the Var1 column
tbl <- select(tbl, -Var1)
return(tbl)
}
transformTable(df, 'p_adj')
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tukey_beta1 <- TukeyHSD(beta1)
rm(list=ls())
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tukey_beta1 <- TukeyHSD(beta1)
tukey_beta1 <- TukeyHSD(beta1)
plot(tukey_beta1)
tukey_beta1 <- TukeyHSD(beta1)
tukey_beta1
beta1
tukey_beta1 <- as.matrix(TukeyHSD(beta1))
tukey_beta1[order(tukey_beta1[, 'p adj']), ]
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tukey_beta1 <- as.matrix(TukeyHSD(beta1))
tukey_beta1
tukey_beta1 <- TukeyHSD(beta1)
tukey_beta1
tukey_beta1$group
order(tukey_beta1$group)
order(tukey_beta1$group[, 'p adj'])
tukey_beta1[order(p adj),]
tukey_beta1[order("p adj"),]
tukey_beta1[order(tukey_beta1$group[4]),]
tukey_beta1$group[,4]
tukey_beta1[order(tukey_beta1$group[,4]),]
tukey_beta1 <- TukeyHSD(beta1)
tukey_beta1
order(tukey_beta1$group[,4])
tukey_beta1[order(tukey_beta1$group[,4])]
diff <- c(6, 7, 12, 14, 56)
lwr <- c(21000, 23400, 26800, 122, 29000)
upr <- c(1.1, 5.4, 3.2, 10.6, 20.5)
padj <- c(0.01, 0.02, 0.03, 0.04, 0.05)
test <- data.frame(diff, lwr, upr, padj)
test
diff <- c(6, 7, 12, 14, 56)
lwr <- c(21000, 23400, 26800, 122, 29000)
upr <- c(1.1, 5.4, 3.2, 10.6, 20.5)
padj <- c(0.03, 0.02, 0.01, 0.05, 0.04)
test <- data.frame(diff, lwr, upr, padj)
test
tukey_beta1$group
diff <- c(6, 7, 12, 14, 56)
lwr <- c(21000, 23400, 26800, 122, 29000)
upr <- c(1.1, 5.4, 3.2, 10.6, 20.5)
padj <- c(0.03, 0.02, 0.01, 0.05, 0.04)
group <- data.frame(diff, lwr, upr, padj)
test <- data.frame()
test$group <- group
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tukey_beta1 <- TukeyHSD(beta1)
tukey_beta1[order(tukey_beta1$group[,4])]
##
diff <- c(6, 7, 12, 14, 56)
lwr <- c(21000, 23400, 26800, 122, 29000)
upr <- c(1.1, 5.4, 3.2, 10.6, 20.5)
padj <- c(0.03, 0.02, 0.01, 0.05, 0.04)
group <- data.frame(diff, lwr, upr, padj)
test <- data.frame()
test$group <- group
tukey_beta1$group
str(tukey_beta1)
test <- list()
test$group <- group
test$group
test[order(test$group[,4])]
test$group[,4]
tukey_beta1$group[,4]
order(test$group[,4])
test[order(test$group[,4])]
tukey_beta1
str(tukey_beta1$group)
# Load packages
library(vegan)
library(multcompView)
# Load phyloseq object
load("/home/jharriso/Downloads/ps_disp.Rda")
tukey_beta1 <- TukeyHSD(beta1)
tukey_beta1[order(tukey_beta1$group[,4])]
##
diff <- c(6, 7, 12, 14, 56)
lwr <- c(21000, 23400, 26800, 122, 29000)
upr <- c(1.1, 5.4, 3.2, 10.6, 20.5)
padj <- c(0.03, 0.02, 0.01, 0.05, 0.04)
group <- matrix(diff, lwr, upr, padj)
test <- list()
test$group <- group
test[order(test$group[,4])]
test$group
.libPaths()
install.packages("rmdformats")
txt <- read.txt("/Downloads/mcra/tax4mcrA.taxonomy.txt")
txt <- read_txt("/Downloads/mcra/tax4mcrA.taxonomy.txt")
txt <- read.file("/Downloads/mcra/tax4mcrA.taxonomy.txt")
txt <- read_tsv("/Downloads/mcra/tax4mcrA.taxonomy.txt", sep = ";")
library(tidyverse)
library(dplyr)
install.packages("tidyverse")
# Seili 16S analysis - jesse harrison 2020-2021
# using seili-r Singularity container (based on seili-r.def)
# additional libpath ####
# (see extra_RPackages.R for extra package installs)
.libPaths(c("/home/jharriso/seili-singularity/rpackages", .libPaths()))
# packages ####
packages <- c("phyloseq", "ggplot2", "vegan", "grid", "gridExtra", "data.table", "plyr", "cowplot",
"RVAideMemoire", "microbiome", "knitr", "RColorBrewer", "Cairo", "multcompView",
"QsRutils", "dplyr", "ggvegan")
lapply(packages, require, character.only = TRUE)
# sessioninfo ####
# R version 4.0.2 (2020-06-22)
# Platform: x86_64-pc-linux-gnu (64-bit)
# Running under: Ubuntu 18.04.5 LTS
# Matrix products: default
# BLAS/LAPACK: /opt/intel/compilers_and_libraries_2020.0.166/linux/mkl/lib/intel64_lin/libmkl_gf_lp64.so
# locale:
#  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8
#  [6] LC_MESSAGES=C.UTF-8    LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           LC_TELEPHONE=C
# [11] LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C
# attached base packages:
#  [1] grid      stats     graphics  grDevices utils     datasets  methods   base
# other attached packages:
#  [1] multcompView_0.1-8   Cairo_1.5-12.2       RColorBrewer_1.1-2   knitr_1.30           microbiome_1.12.0    RVAideMemoire_0.9-78
#  [7] cowplot_1.1.0        plyr_1.8.6           data.table_1.13.2    gridExtra_2.3        vegan_2.5-7          lattice_0.20-41
# [13] permute_0.9-5        ggplot2_3.3.2        phyloseq_1.34.0
# loaded via a namespace (and not attached):
#  [1] Rcpp_1.0.5          ape_5.4-1           tidyr_1.1.2         prettyunits_1.1.1   Biostrings_2.58.0   digest_0.6.27
#  [7] foreach_1.5.1       R6_2.5.0            stats4_4.0.2        pillar_1.4.7        zlibbioc_1.36.0     rlang_0.4.9
# [13] progress_1.2.2      rstudioapi_0.13     S4Vectors_0.28.0    Matrix_1.2-18       labeling_0.4.2      splines_4.0.2
# [19] Rtsne_0.15          stringr_1.4.0       igraph_1.2.6        munsell_0.5.0       tinytex_0.27        compiler_4.0.2
# [25] xfun_0.19           pkgconfig_2.0.3     BiocGenerics_0.36.0 multtest_2.46.0     mgcv_1.8-33         biomformat_1.18.0
# [31] tidyselect_1.1.0    tibble_3.0.4        IRanges_2.24.0      codetools_0.2-18    crayon_1.3.4        dplyr_1.0.2
# [37] withr_2.3.0         MASS_7.3-53         rhdf5filters_1.2.0  nlme_3.1-150        jsonlite_1.7.1      gtable_0.3.0
# [43] lifecycle_0.2.0     magrittr_2.0.1      scales_1.1.1        stringi_1.5.3       farver_2.0.3        XVector_0.30.0
# [49] reshape2_1.4.4      ellipsis_0.3.1      generics_0.1.0      vctrs_0.3.5         Rhdf5lib_1.12.0     iterators_1.0.13
# [55] tools_4.0.2         ade4_1.7-16         Biobase_2.50.0      glue_1.4.2          purrr_0.3.4         hms_0.5.3
# [61] parallel_4.0.2      survival_3.2-7      colorspace_2.0-0    rhdf5_2.34.0        cluster_2.1.0
# ggplot2 theme ####
theme_set(theme_classic())
# working directory ####
setwd("/home/jharriso/git/seili-metabarcoding/")
# load 16S RData ####
load("rdata/Seili16s.RData")
# based on: import_biom("tables_sampledata_export.biom", treefilename="tree_rooted.tree", refseqfilename="otus.fasta")
colnames(tax_table(ps))
colnames(tax_table(rawdata))
# Seili 16S analysis - jesse harrison 2020-2021
# using seili-r Singularity container (based on seili-r.def)
# additional libpath ####
# (see extra_RPackages.R for extra package installs)
.libPaths(c("/home/jharriso/seili-singularity/rpackages", .libPaths()))
# packages ####
packages <- c("phyloseq", "ggplot2", "vegan", "grid", "gridExtra", "data.table", "plyr", "cowplot",
"RVAideMemoire", "microbiome", "knitr", "RColorBrewer", "Cairo", "multcompView",
"QsRutils", "dplyr", "ggvegan")
lapply(packages, require, character.only = TRUE)
# ggplot2 theme ####
theme_set(theme_classic())
# working directory ####
setwd("/home/jharriso/git/seili-metabarcoding/")
# load 16S RData ####
load("rdata/Seili18s.RData")
# based on: import_biom("tables_sampledata_export.biom", treefilename="tree_rooted.tree", refseqfilename="otus.fasta")
colnames(tax_table(rawdata))
.libPaths(c("/home/jharriso/seili-singularity/rpackages", .libPaths()))
packages <- c("phyloseq", "ggplot2", "vegan", "grid", "gridExtra", "data.table", "plyr", "cowplot",
"RVAideMemoire", "microbiome", "knitr", "RColorBrewer", "Cairo", "multcompView",
"QsRutils", "dplyr", "ggvegan")
lapply(packages, require, character.only = TRUE)
theme_set(theme_classic())
setwd("/home/jharriso/git/seili-metabarcoding/")
load("rdata/Seili16s.RData")
colnames(tax_table(rawdata))
length(colnames(tax_table(rawdata)))
if (taxlength == "67"){
colnames(tax_table(rawdata)) <- c("Domain_Kingdom", "Phylum", "Class", "Order", "Family", "Genus")
colnames(tax_table(rawdata))
)
if (taxlength == "67"){
colnames(tax_table(rawdata)) <- c("Domain_Kingdom", "Phylum", "Class", "Order", "Family", "Genus")
}
colnames(tax_table(rawdata))
if (taxlength == "6"){
colnames(tax_table(rawdata)) <- c("Domain_Kingdom", "Phylum", "Class", "Order", "Family", "Genus")
}
colnames(tax_table(rawdata))
taxlength <- length(colnames(tax_table(rawdata)))
if (taxlength == "67"){
colnames(tax_table(rawdata)) <- c("Domain_Kingdom", "Phylum", "Class", "Order", "Family", "Genus")
}
colnames(tax_table(rawdata))
if (taxlength == "6"){
colnames(tax_table(rawdata)) <- c("Domain_Kingdom", "Phylum", "Class", "Order", "Family", "Genus")
}
colnames(tax_table(rawdata))
